import { TRPCEndpoint } from '.';
import { tsutil } from './tsutil';
export declare type TRPCPayload<Ctx = unknown> = {
    path: string[];
    args: unknown[];
    context: Ctx;
};
export declare class TRPCRouter<Children extends {
    [k: string]: TRPCRouter<any, any>;
} = {}, Endpoints extends {
    [k: string]: TRPCEndpoint<any>;
} = {}> {
    readonly _def: {
        children: Children;
        endpoints: Endpoints;
    };
    readonly _sdk: tsutil.format<{
        [k in keyof Children]: Children[k]['_sdk'];
    } & {
        [k in keyof Endpoints]: Endpoints[k]['_sdk'];
    }>;
    constructor(def: {
        children: Children;
        endpoints: Endpoints;
    });
    endpoint: <P extends string, E extends TRPCEndpoint<any>>(path: P, endpt: E) => TRPCRouter<Children, tsutil.format<Endpoints & {
        [k in P]: E;
    }>>;
    compose: <P extends string, R extends TRPCRouter>(path: P, child: R) => TRPCRouter<tsutil.format<Children & {
        [k in P]: R;
    }>, Endpoints>;
    handle: (payload: TRPCPayload) => any;
    static create: () => TRPCRouter;
    toExpress: () => (request: any, response: any, next: any) => Promise<any>;
    toServerSDK: () => tsutil.format<{
        [k in keyof Children]: ReturnType<Children[k]['toServerSDK']>;
    } & {
        [k in keyof Endpoints]: ReturnType<Endpoints[k]['_toServerSDK']>;
    }>;
}
