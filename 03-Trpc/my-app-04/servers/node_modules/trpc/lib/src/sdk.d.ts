import { TRPCRouter, TRPCEndpoint } from './internal';
import { tsutil } from './tsutil';
import { TRPCPayload } from './router';
export declare type ClientSDKHandler = (url: string, payload: {
    path: string[];
    args: unknown[];
    context: unknown;
}) => Promise<unknown>;
export declare type ToClientSDKParams<Ctx> = {
    url: string;
    getContext: () => Ctx;
    handler?: ClientSDKHandler;
};
export declare type TRPCRequest<T> = {
    run: () => Promise<T>;
    payload: TRPCPayload;
};
declare type EndpointToSDK<T extends TRPCEndpoint<any>, Ctx> = T['_func'] extends (ctx: any) => (...args: infer U) => any ? (...args: U) => {
    run: () => tsutil.promisify<ReturnType<ReturnType<T['_func']>>>;
    payload: TRPCPayload<Ctx>;
} : never;
declare type RouterToSDK<T extends TRPCRouter<any, any>, Ctx> = tsutil.format<{
    [k in keyof T['_def']['children']]: T['_def']['children'][k] extends TRPCRouter<any> ? RouterToSDK<T['_def']['children'][k], Ctx> : never;
} & {
    [k in keyof T['_def']['endpoints']]: EndpointToSDK<T['_def']['endpoints'][k], Ctx>;
}>;
export declare const makeSDK: <T extends TRPCRouter<any, any>, Ctx = unknown>(params: ToClientSDKParams<Ctx>) => RouterToSDK<T, Ctx>;
export {};
