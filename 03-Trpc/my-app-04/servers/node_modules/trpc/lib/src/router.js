"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRPCRouter = void 0;
var _1 = require(".");
// export type ClientSDKHandler = (url: string, payload: { path: string[]; args: unknown[] }) => Promise<unknown>;
// export type ToClientSDKParams = { url: string; getContext: () => Promise<any>; handler: ClientSDKHandler };
var TRPCRouter = /** @class */ (function () {
    function TRPCRouter(def) {
        var _this = this;
        this.endpoint = function (path, endpt) {
            var _a;
            if (_this._def.children[path] || _this._def.endpoints[path])
                throw new _1.TRPCError(500, 
                // TRPCErrorCode.NameConflict,
                {
                    message: "Name conflict: \"" + path + "\" already in use",
                });
            return new TRPCRouter({
                children: _this._def.children,
                endpoints: __assign(__assign({}, _this._def.endpoints), (_a = {}, _a[path] = endpt, _a)),
            });
        };
        this.compose = function (path, child) {
            var _a;
            if (_this._def.children[path] || _this._def.endpoints[path])
                throw new _1.TRPCError(500, 
                // TRPCErrorCode.NameConflict,
                {
                    message: "Name conflict: \"" + path + "\" already in use",
                });
            return new TRPCRouter({
                children: __assign(__assign({}, _this._def.children), (_a = {}, _a[path] = child, _a)),
                endpoints: _this._def.endpoints,
            });
        };
        this.handle = function (payload) { return __awaiter(_this, void 0, void 0, function () {
            var path, args, context, segment, maybeEndpoint, maybeChild, handler, isAuthorized, err_1, value, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!payload) {
                            throw new _1.TRPCError(500, 
                            // TRPCErrorCode.InvalidEndpoint,
                            {
                                message: "No body received in post request.\nMake sure you've configured a body parser middleware.",
                            });
                        }
                        path = payload.path, args = payload.args, context = payload.context;
                        if (!Array.isArray(path) || !path.every(function (x) { return typeof x === 'string'; })) {
                            throw new _1.TRPCError(400, 
                            // TRPCErrorCode.InvalidEndpoint,
                            {
                                message: 'body.endpoint should be array of strings.',
                            });
                        }
                        if (!Array.isArray(args)) {
                            throw new _1.TRPCError(400, 
                            // TRPCErrorCode.InvalidArguments,
                            {
                                message: 'body.args should be an array.',
                            });
                        }
                        if (!path || path.length === 0)
                            throw new _1.TRPCError(400, 
                            // TRPCErrorCode.InvalidEndpoint,
                            {
                                message: 'Path is empty',
                            });
                        segment = path[0];
                        if (typeof segment !== 'string')
                            throw new _1.TRPCError(400, 
                            // TRPCErrorCode.InvalidEndpoint,
                            {
                                message: "Endpoint segment is of non-string type: " + typeof segment,
                            });
                        maybeEndpoint = this._def.endpoints[segment];
                        maybeChild = this._def.children[segment];
                        if (maybeEndpoint && maybeChild)
                            throw new _1.TRPCError(500, 
                            // TRPCErrorCode.NameConflict,
                            {
                                message: "Naming conflict. Endpoint and subrouter share path \"" + segment + "\"",
                            });
                        if (!maybeEndpoint && !maybeChild)
                            throw new _1.TRPCError(501, 
                            // TRPCErrorCode.EndpointNotFound,
                            {
                                message: "Endpoint not found: \"" + segment + "\"",
                            });
                        if (!maybeChild) return [3 /*break*/, 2];
                        if (path.length < 2) {
                            throw new _1.TRPCError(501, 
                            // TRPCErrorCode.InvalidPath,
                            {
                                message: "Endpoint path must terminate with an endpoint, not a child router",
                            });
                        }
                        return [4 /*yield*/, maybeChild.handle({ path: path.slice(1), args: args, context: context })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        handler = maybeEndpoint;
                        if (!(handler instanceof _1.TRPCEndpoint)) {
                            throw new _1.TRPCError(500, 
                            // TRPCErrorCode.InvalidEndpoint,
                            {
                                message: "Invalid endpoint at \"" + segment + "\".",
                            });
                        }
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, handler._def.authorize(context).apply(void 0, args)];
                    case 4:
                        isAuthorized = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        if (err_1.__kind === 'TRPCError') {
                            throw err_1;
                        }
                        throw new _1.TRPCError(500, 
                        // TRPCErrorCode.AuthorizationError,
                        { message: err_1.message });
                    case 6:
                        if (!isAuthorized) {
                            throw new _1.TRPCError(403, 
                            // TRPCErrorCode.NotAuthorized,
                            {
                                message: 'Access denied.',
                            });
                        }
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, handler.call.apply(handler, __spreadArrays([context], args))];
                    case 8:
                        value = _a.sent();
                        return [2 /*return*/, value];
                    case 9:
                        err_2 = _a.sent();
                        console.log("caught error in handler");
                        console.log(err_2);
                        if (err_2.__kind === 'TRPCError') {
                            console.log("caught trpc error");
                            throw err_2;
                        }
                        throw new _1.TRPCError(500, 
                        // TRPCErrorCode.UnknownError,
                        {
                            message: err_2.message,
                            error: err_2,
                        });
                    case 10: return [2 /*return*/];
                }
            });
        }); };
        this.toExpress = function () { return function (request, response, next) { return __awaiter(_this, void 0, void 0, function () {
            var result, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (request.method !== 'POST') {
                            throw new _1.TRPCError(400, 
                            // TRPCErrorCode.InvalidMethod,
                            {
                                message: 'Skii RPC APIs only accept post requests',
                            });
                        }
                        return [4 /*yield*/, this.handle(request.body)];
                    case 1:
                        result = _a.sent();
                        response.status(200).json(result);
                        if (next)
                            next();
                        return [3 /*break*/, 3];
                    case 2:
                        err_3 = _a.sent();
                        if (err_3.__kind === 'TRPCError') {
                            console.log("caught trpc error: " + err_3.code);
                            console.log(err_3);
                            return [2 /*return*/, response.status(err_3.code || 500).json(err_3.data)];
                        }
                        try {
                            return [2 /*return*/, response.status(500).json(err_3)];
                        }
                        catch (err) {
                            return [2 /*return*/, response.status(500).send("Unexpected error occurred.")];
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); }; };
        this.toServerSDK = function () {
            var sdkObject = {};
            for (var name_1 in _this._def.children) {
                sdkObject[name_1] = _this._def.children[name_1].toServerSDK();
            }
            for (var name_2 in _this._def.endpoints) {
                sdkObject[name_2] = _this._def.endpoints[name_2]._toServerSDK();
            }
            return sdkObject;
        };
        this._def = def;
    }
    TRPCRouter.create = function () {
        return new TRPCRouter({ endpoints: {}, children: {} });
    };
    return TRPCRouter;
}());
exports.TRPCRouter = TRPCRouter;
//# sourceMappingURL=router.js.map