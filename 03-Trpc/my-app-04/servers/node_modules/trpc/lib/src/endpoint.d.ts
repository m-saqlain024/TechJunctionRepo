import { tsutil } from './tsutil';
import { TRPCPayload } from './router';
declare type AnyFunc = (...args: any[]) => any;
declare type WrappedFunc = (ctx: any) => (...args: any[]) => any;
export declare type TRPCEndpointDef<Func extends WrappedFunc> = {
    implement: Func;
    authorize: (ctx: any) => (...args: Parameters<ReturnType<Func>>) => boolean | Promise<boolean>;
};
export declare class TRPCEndpoint<Func extends AnyFunc> {
    readonly _func: Func;
    readonly _def: TRPCEndpointDef<Func>;
    readonly _sdk: Func extends (ctx: any) => (...args: infer U) => any ? (...args: U) => {
        run: () => tsutil.promisify<ReturnType<ReturnType<Func>>>;
        payload: TRPCPayload;
    } : never;
    constructor(def: TRPCEndpointDef<Func>);
    static create: <F extends WrappedFunc>(func: F) => TRPCEndpoint<F>;
    call: (ctx: Parameters<Func>[0], ...args: Parameters<ReturnType<Func>>) => ReturnType<ReturnType<Func>>;
    authorize: (func: (ctx: Parameters<Func>[0]) => (...args: Parameters<ReturnType<Func>>) => boolean | Promise<boolean>) => this;
    _toServerSDK: () => (ctx: Parameters<Func>[0], ...args: Parameters<ReturnType<Func>>) => ReturnType<ReturnType<Func>>;
}
export {};
